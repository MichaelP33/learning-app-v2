import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// Resolve repo root relative to this script's location
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const root = path.resolve(__dirname, "..");

const quizzesDir = path.join(root, "data", "quizzes");
const outPath = path.join(root, "src", "lib", "generated-quizzes.ts");

function kebabBase(filename) {
  return filename.replace(/\.json$/i, "");
}

// Read quiz JSON files if the directory exists; otherwise, skip gracefully
const files = fs.existsSync(quizzesDir)
  ? fs
      .readdirSync(quizzesDir)
      .filter((f) => f.toLowerCase().endsWith(".json"))
  : [];

const entries = [];
for (const file of files) {
  const articleId = kebabBase(file);
  const full = path.join(quizzesDir, file);
  try {
    const json = JSON.parse(fs.readFileSync(full, "utf8"));
    // Normalize types: ensure question.id is a string to satisfy QuizQuestion.id
    if (Array.isArray(json.questions)) {
      json.questions = json.questions.map((qq) => {
        const next = { ...qq };
        if (next && typeof next.id !== "string") {
          next.id = String(next.id);
        }
        return next;
      });
    }
    entries.push({ id: articleId, data: json });
  } catch (e) {
    console.warn(`Skipping invalid quiz file: ${file} (${e?.message || e})`);
  }
}

const body = entries
  .map((e) => `  ${JSON.stringify(e.id)}: ${JSON.stringify(e.data, null, 2)}`)
  .join(",\n");

const content = `import type { Quiz } from "@/types";

// AUTO-GENERATED by scripts/generate-quizzes-registry.mjs
export const externalQuizzes: Record<string, Quiz> = {
${body}
};
`;

fs.writeFileSync(outPath, content);
console.log(
  `Generated quizzes registry with ${entries.length} entr${
    entries.length === 1 ? "y" : "ies"
  } at ${outPath}`
);
